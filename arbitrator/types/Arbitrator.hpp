// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file Arbitrator.hpp
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef FAST_DDS_GENERATED__ARBITRATOR_HPP
#define FAST_DDS_GENERATED__ARBITRATOR_HPP

#include <cstdint>
#include <string>
#include <utility>
#include <fastcdr/cdr/fixed_size_string.hpp>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(ARBITRATOR_SOURCE)
#define ARBITRATOR_DllAPI __declspec( dllexport )
#else
#define ARBITRATOR_DllAPI __declspec( dllimport )
#endif // ARBITRATOR_SOURCE
#else
#define ARBITRATOR_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define ARBITRATOR_DllAPI
#endif // _WIN32

/*!
 * @brief This class represents the enumeration InjectionControllerType defined by the user in the IDL file.
 * @ingroup Arbitrator
 */
enum class InjectionControllerType : int32_t
{
    UNKNOWN,
    POWERHEAD,
    CONSOLE,
    SCANNER_INTERFACE
};
/*!
 * @brief This class represents the structure OwnershipRequestType defined by the user in the IDL file.
 * @ingroup Arbitrator
 */
class OwnershipRequestType
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport OwnershipRequestType()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~OwnershipRequestType()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object OwnershipRequestType that will be copied.
     */
    eProsima_user_DllExport OwnershipRequestType(
            const OwnershipRequestType& x)
    {
                    m_client_id = x.m_client_id;

                    m_requester_type = x.m_requester_type;

                    m_current_strength = x.m_current_strength;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object OwnershipRequestType that will be copied.
     */
    eProsima_user_DllExport OwnershipRequestType(
            OwnershipRequestType&& x) noexcept
    {
        m_client_id = std::move(x.m_client_id);
        m_requester_type = x.m_requester_type;
        m_current_strength = x.m_current_strength;
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object OwnershipRequestType that will be copied.
     */
    eProsima_user_DllExport OwnershipRequestType& operator =(
            const OwnershipRequestType& x)
    {

                    m_client_id = x.m_client_id;

                    m_requester_type = x.m_requester_type;

                    m_current_strength = x.m_current_strength;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object OwnershipRequestType that will be copied.
     */
    eProsima_user_DllExport OwnershipRequestType& operator =(
            OwnershipRequestType&& x) noexcept
    {

        m_client_id = std::move(x.m_client_id);
        m_requester_type = x.m_requester_type;
        m_current_strength = x.m_current_strength;
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x OwnershipRequestType object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const OwnershipRequestType& x) const
    {
        return (m_client_id == x.m_client_id &&
           m_requester_type == x.m_requester_type &&
           m_current_strength == x.m_current_strength);
    }

    /*!
     * @brief Comparison operator.
     * @param x OwnershipRequestType object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const OwnershipRequestType& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function copies the value in member client_id
     * @param _client_id New value to be copied in member client_id
     */
    eProsima_user_DllExport void client_id(
            const std::string& _client_id)
    {
        m_client_id = _client_id;
    }

    /*!
     * @brief This function moves the value in member client_id
     * @param _client_id New value to be moved in member client_id
     */
    eProsima_user_DllExport void client_id(
            std::string&& _client_id)
    {
        m_client_id = std::move(_client_id);
    }

    /*!
     * @brief This function returns a constant reference to member client_id
     * @return Constant reference to member client_id
     */
    eProsima_user_DllExport const std::string& client_id() const
    {
        return m_client_id;
    }

    /*!
     * @brief This function returns a reference to member client_id
     * @return Reference to member client_id
     */
    eProsima_user_DllExport std::string& client_id()
    {
        return m_client_id;
    }


    /*!
     * @brief This function sets a value in member requester_type
     * @param _requester_type New value for member requester_type
     */
    eProsima_user_DllExport void requester_type(
            InjectionControllerType _requester_type)
    {
        m_requester_type = _requester_type;
    }

    /*!
     * @brief This function returns the value of member requester_type
     * @return Value of member requester_type
     */
    eProsima_user_DllExport InjectionControllerType requester_type() const
    {
        return m_requester_type;
    }

    /*!
     * @brief This function returns a reference to member requester_type
     * @return Reference to member requester_type
     */
    eProsima_user_DllExport InjectionControllerType& requester_type()
    {
        return m_requester_type;
    }


    /*!
     * @brief This function sets a value in member current_strength
     * @param _current_strength New value for member current_strength
     */
    eProsima_user_DllExport void current_strength(
            uint32_t _current_strength)
    {
        m_current_strength = _current_strength;
    }

    /*!
     * @brief This function returns the value of member current_strength
     * @return Value of member current_strength
     */
    eProsima_user_DllExport uint32_t current_strength() const
    {
        return m_current_strength;
    }

    /*!
     * @brief This function returns a reference to member current_strength
     * @return Reference to member current_strength
     */
    eProsima_user_DllExport uint32_t& current_strength()
    {
        return m_current_strength;
    }



private:

    std::string m_client_id;
    InjectionControllerType m_requester_type{InjectionControllerType::UNKNOWN};
    uint32_t m_current_strength{0};

};
/*!
 * @brief This class represents the structure OwnershipReplyType defined by the user in the IDL file.
 * @ingroup Arbitrator
 */
class OwnershipReplyType
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport OwnershipReplyType()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~OwnershipReplyType()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object OwnershipReplyType that will be copied.
     */
    eProsima_user_DllExport OwnershipReplyType(
            const OwnershipReplyType& x)
    {
                    m_client_id = x.m_client_id;

                    m_ownership_allowed = x.m_ownership_allowed;

                    m_strength = x.m_strength;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object OwnershipReplyType that will be copied.
     */
    eProsima_user_DllExport OwnershipReplyType(
            OwnershipReplyType&& x) noexcept
    {
        m_client_id = std::move(x.m_client_id);
        m_ownership_allowed = x.m_ownership_allowed;
        m_strength = x.m_strength;
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object OwnershipReplyType that will be copied.
     */
    eProsima_user_DllExport OwnershipReplyType& operator =(
            const OwnershipReplyType& x)
    {

                    m_client_id = x.m_client_id;

                    m_ownership_allowed = x.m_ownership_allowed;

                    m_strength = x.m_strength;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object OwnershipReplyType that will be copied.
     */
    eProsima_user_DllExport OwnershipReplyType& operator =(
            OwnershipReplyType&& x) noexcept
    {

        m_client_id = std::move(x.m_client_id);
        m_ownership_allowed = x.m_ownership_allowed;
        m_strength = x.m_strength;
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x OwnershipReplyType object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const OwnershipReplyType& x) const
    {
        return (m_client_id == x.m_client_id &&
           m_ownership_allowed == x.m_ownership_allowed &&
           m_strength == x.m_strength);
    }

    /*!
     * @brief Comparison operator.
     * @param x OwnershipReplyType object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const OwnershipReplyType& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function copies the value in member client_id
     * @param _client_id New value to be copied in member client_id
     */
    eProsima_user_DllExport void client_id(
            const std::string& _client_id)
    {
        m_client_id = _client_id;
    }

    /*!
     * @brief This function moves the value in member client_id
     * @param _client_id New value to be moved in member client_id
     */
    eProsima_user_DllExport void client_id(
            std::string&& _client_id)
    {
        m_client_id = std::move(_client_id);
    }

    /*!
     * @brief This function returns a constant reference to member client_id
     * @return Constant reference to member client_id
     */
    eProsima_user_DllExport const std::string& client_id() const
    {
        return m_client_id;
    }

    /*!
     * @brief This function returns a reference to member client_id
     * @return Reference to member client_id
     */
    eProsima_user_DllExport std::string& client_id()
    {
        return m_client_id;
    }


    /*!
     * @brief This function sets a value in member ownership_allowed
     * @param _ownership_allowed New value for member ownership_allowed
     */
    eProsima_user_DllExport void ownership_allowed(
            bool _ownership_allowed)
    {
        m_ownership_allowed = _ownership_allowed;
    }

    /*!
     * @brief This function returns the value of member ownership_allowed
     * @return Value of member ownership_allowed
     */
    eProsima_user_DllExport bool ownership_allowed() const
    {
        return m_ownership_allowed;
    }

    /*!
     * @brief This function returns a reference to member ownership_allowed
     * @return Reference to member ownership_allowed
     */
    eProsima_user_DllExport bool& ownership_allowed()
    {
        return m_ownership_allowed;
    }


    /*!
     * @brief This function sets a value in member strength
     * @param _strength New value for member strength
     */
    eProsima_user_DllExport void strength(
            uint32_t _strength)
    {
        m_strength = _strength;
    }

    /*!
     * @brief This function returns the value of member strength
     * @return Value of member strength
     */
    eProsima_user_DllExport uint32_t strength() const
    {
        return m_strength;
    }

    /*!
     * @brief This function returns a reference to member strength
     * @return Reference to member strength
     */
    eProsima_user_DllExport uint32_t& strength()
    {
        return m_strength;
    }



private:

    std::string m_client_id;
    bool m_ownership_allowed{false};
    uint32_t m_strength{0};

};
/*!
 * @brief This class represents the structure CurrentOwnershipStateType defined by the user in the IDL file.
 * @ingroup Arbitrator
 */
class CurrentOwnershipStateType
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport CurrentOwnershipStateType()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~CurrentOwnershipStateType()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object CurrentOwnershipStateType that will be copied.
     */
    eProsima_user_DllExport CurrentOwnershipStateType(
            const CurrentOwnershipStateType& x)
    {
                    m_requester_type = x.m_requester_type;

                    m_current_strength = x.m_current_strength;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object CurrentOwnershipStateType that will be copied.
     */
    eProsima_user_DllExport CurrentOwnershipStateType(
            CurrentOwnershipStateType&& x) noexcept
    {
        m_requester_type = x.m_requester_type;
        m_current_strength = x.m_current_strength;
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object CurrentOwnershipStateType that will be copied.
     */
    eProsima_user_DllExport CurrentOwnershipStateType& operator =(
            const CurrentOwnershipStateType& x)
    {

                    m_requester_type = x.m_requester_type;

                    m_current_strength = x.m_current_strength;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object CurrentOwnershipStateType that will be copied.
     */
    eProsima_user_DllExport CurrentOwnershipStateType& operator =(
            CurrentOwnershipStateType&& x) noexcept
    {

        m_requester_type = x.m_requester_type;
        m_current_strength = x.m_current_strength;
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x CurrentOwnershipStateType object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const CurrentOwnershipStateType& x) const
    {
        return (m_requester_type == x.m_requester_type &&
           m_current_strength == x.m_current_strength);
    }

    /*!
     * @brief Comparison operator.
     * @param x CurrentOwnershipStateType object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const CurrentOwnershipStateType& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function sets a value in member requester_type
     * @param _requester_type New value for member requester_type
     */
    eProsima_user_DllExport void requester_type(
            InjectionControllerType _requester_type)
    {
        m_requester_type = _requester_type;
    }

    /*!
     * @brief This function returns the value of member requester_type
     * @return Value of member requester_type
     */
    eProsima_user_DllExport InjectionControllerType requester_type() const
    {
        return m_requester_type;
    }

    /*!
     * @brief This function returns a reference to member requester_type
     * @return Reference to member requester_type
     */
    eProsima_user_DllExport InjectionControllerType& requester_type()
    {
        return m_requester_type;
    }


    /*!
     * @brief This function sets a value in member current_strength
     * @param _current_strength New value for member current_strength
     */
    eProsima_user_DllExport void current_strength(
            uint32_t _current_strength)
    {
        m_current_strength = _current_strength;
    }

    /*!
     * @brief This function returns the value of member current_strength
     * @return Value of member current_strength
     */
    eProsima_user_DllExport uint32_t current_strength() const
    {
        return m_current_strength;
    }

    /*!
     * @brief This function returns a reference to member current_strength
     * @return Reference to member current_strength
     */
    eProsima_user_DllExport uint32_t& current_strength()
    {
        return m_current_strength;
    }



private:

    InjectionControllerType m_requester_type{InjectionControllerType::UNKNOWN};
    uint32_t m_current_strength{0};

};

#endif // _FAST_DDS_GENERATED_ARBITRATOR_HPP_


