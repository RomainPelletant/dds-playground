// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file ArbitratorTypeObjectSupport.cxx
 * Source file containing the implementation to register the TypeObject representation of the described types in the IDL file
 *
 * This file was generated by the tool fastddsgen.
 */

#include "ArbitratorTypeObjectSupport.hpp"

#include <mutex>
#include <string>

#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>
#include <fastdds/dds/domain/DomainParticipantFactory.hpp>
#include <fastdds/dds/log/Log.hpp>
#include <fastdds/dds/xtypes/common.hpp>
#include <fastdds/dds/xtypes/type_representation/ITypeObjectRegistry.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObject.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObjectUtils.hpp>

#include "Arbitrator.hpp"


using namespace eprosima::fastdds::dds::xtypes;

void register_InjectionControllerType_type_identifier(
        TypeIdentifierPair& type_ids_InjectionControllerType)
{
    ReturnCode_t return_code_InjectionControllerType {eprosima::fastdds::dds::RETCODE_OK};
    return_code_InjectionControllerType =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "InjectionControllerType", type_ids_InjectionControllerType);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_InjectionControllerType)
    {
        EnumTypeFlag enum_flags_InjectionControllerType = 0;
        BitBound bit_bound_InjectionControllerType = 32;
        CommonEnumeratedHeader common_InjectionControllerType = TypeObjectUtils::build_common_enumerated_header(bit_bound_InjectionControllerType);
        QualifiedTypeName type_name_InjectionControllerType = "InjectionControllerType";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_InjectionControllerType;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_InjectionControllerType;
        AppliedAnnotationSeq tmp_ann_custom_InjectionControllerType;
        eprosima::fastcdr::optional<AppliedVerbatimAnnotation> verbatim_InjectionControllerType;
        if (!tmp_ann_custom_InjectionControllerType.empty())
        {
            ann_custom_InjectionControllerType = tmp_ann_custom_InjectionControllerType;
        }

        CompleteTypeDetail detail_InjectionControllerType = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_InjectionControllerType, ann_custom_InjectionControllerType, type_name_InjectionControllerType.to_string());
        CompleteEnumeratedHeader header_InjectionControllerType = TypeObjectUtils::build_complete_enumerated_header(common_InjectionControllerType, detail_InjectionControllerType);
        CompleteEnumeratedLiteralSeq literal_seq_InjectionControllerType;
        {
            EnumeratedLiteralFlag flags_UNKNOWN = TypeObjectUtils::build_enumerated_literal_flag(false);
            CommonEnumeratedLiteral common_UNKNOWN = TypeObjectUtils::build_common_enumerated_literal(0, flags_UNKNOWN);
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_UNKNOWN;
            ann_custom_InjectionControllerType.reset();
            MemberName name_UNKNOWN = "UNKNOWN";
            CompleteMemberDetail detail_UNKNOWN = TypeObjectUtils::build_complete_member_detail(name_UNKNOWN, member_ann_builtin_UNKNOWN, ann_custom_InjectionControllerType);
            CompleteEnumeratedLiteral literal_UNKNOWN = TypeObjectUtils::build_complete_enumerated_literal(common_UNKNOWN, detail_UNKNOWN);
            TypeObjectUtils::add_complete_enumerated_literal(literal_seq_InjectionControllerType, literal_UNKNOWN);
        }
        {
            EnumeratedLiteralFlag flags_POWERHEAD = TypeObjectUtils::build_enumerated_literal_flag(false);
            CommonEnumeratedLiteral common_POWERHEAD = TypeObjectUtils::build_common_enumerated_literal(1, flags_POWERHEAD);
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_POWERHEAD;
            ann_custom_InjectionControllerType.reset();
            MemberName name_POWERHEAD = "POWERHEAD";
            CompleteMemberDetail detail_POWERHEAD = TypeObjectUtils::build_complete_member_detail(name_POWERHEAD, member_ann_builtin_POWERHEAD, ann_custom_InjectionControllerType);
            CompleteEnumeratedLiteral literal_POWERHEAD = TypeObjectUtils::build_complete_enumerated_literal(common_POWERHEAD, detail_POWERHEAD);
            TypeObjectUtils::add_complete_enumerated_literal(literal_seq_InjectionControllerType, literal_POWERHEAD);
        }
        {
            EnumeratedLiteralFlag flags_CONSOLE = TypeObjectUtils::build_enumerated_literal_flag(false);
            CommonEnumeratedLiteral common_CONSOLE = TypeObjectUtils::build_common_enumerated_literal(2, flags_CONSOLE);
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_CONSOLE;
            ann_custom_InjectionControllerType.reset();
            MemberName name_CONSOLE = "CONSOLE";
            CompleteMemberDetail detail_CONSOLE = TypeObjectUtils::build_complete_member_detail(name_CONSOLE, member_ann_builtin_CONSOLE, ann_custom_InjectionControllerType);
            CompleteEnumeratedLiteral literal_CONSOLE = TypeObjectUtils::build_complete_enumerated_literal(common_CONSOLE, detail_CONSOLE);
            TypeObjectUtils::add_complete_enumerated_literal(literal_seq_InjectionControllerType, literal_CONSOLE);
        }
        {
            EnumeratedLiteralFlag flags_SCANNER_INTERFACE = TypeObjectUtils::build_enumerated_literal_flag(false);
            CommonEnumeratedLiteral common_SCANNER_INTERFACE = TypeObjectUtils::build_common_enumerated_literal(3, flags_SCANNER_INTERFACE);
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_SCANNER_INTERFACE;
            ann_custom_InjectionControllerType.reset();
            MemberName name_SCANNER_INTERFACE = "SCANNER_INTERFACE";
            CompleteMemberDetail detail_SCANNER_INTERFACE = TypeObjectUtils::build_complete_member_detail(name_SCANNER_INTERFACE, member_ann_builtin_SCANNER_INTERFACE, ann_custom_InjectionControllerType);
            CompleteEnumeratedLiteral literal_SCANNER_INTERFACE = TypeObjectUtils::build_complete_enumerated_literal(common_SCANNER_INTERFACE, detail_SCANNER_INTERFACE);
            TypeObjectUtils::add_complete_enumerated_literal(literal_seq_InjectionControllerType, literal_SCANNER_INTERFACE);
        }
        CompleteEnumeratedType enumerated_type_InjectionControllerType = TypeObjectUtils::build_complete_enumerated_type(enum_flags_InjectionControllerType, header_InjectionControllerType,
                literal_seq_InjectionControllerType);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_enumerated_type_object(enumerated_type_InjectionControllerType, type_name_InjectionControllerType.to_string(), type_ids_InjectionControllerType))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                "InjectionControllerType already registered in TypeObjectRegistry for a different type.");
        }
    }
}// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_OwnershipRequestType_type_identifier(
        TypeIdentifierPair& type_ids_OwnershipRequestType)
{

    ReturnCode_t return_code_OwnershipRequestType {eprosima::fastdds::dds::RETCODE_OK};
    return_code_OwnershipRequestType =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "OwnershipRequestType", type_ids_OwnershipRequestType);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_OwnershipRequestType)
    {
        StructTypeFlag struct_flags_OwnershipRequestType = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_OwnershipRequestType = "OwnershipRequestType";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_OwnershipRequestType;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_OwnershipRequestType;
        AppliedAnnotationSeq tmp_ann_custom_OwnershipRequestType;
        eprosima::fastcdr::optional<AppliedVerbatimAnnotation> verbatim_OwnershipRequestType;
        if (!tmp_ann_custom_OwnershipRequestType.empty())
        {
            ann_custom_OwnershipRequestType = tmp_ann_custom_OwnershipRequestType;
        }

        CompleteTypeDetail detail_OwnershipRequestType = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_OwnershipRequestType, ann_custom_OwnershipRequestType, type_name_OwnershipRequestType.to_string());
        CompleteStructHeader header_OwnershipRequestType;
        header_OwnershipRequestType = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_OwnershipRequestType);
        CompleteStructMemberSeq member_seq_OwnershipRequestType;
        {
            TypeIdentifierPair type_ids_client_id;
            ReturnCode_t return_code_client_id {eprosima::fastdds::dds::RETCODE_OK};
            return_code_client_id =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_client_id);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_client_id)
            {
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded", type_ids_client_id))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_client_id = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, true, false);
            MemberId member_id_client_id = 0x00000000;
            bool common_client_id_ec {false};
            CommonStructMember common_client_id {TypeObjectUtils::build_common_struct_member(member_id_client_id, member_flags_client_id, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_client_id, common_client_id_ec))};
            if (!common_client_id_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure client_id member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_client_id = "client_id";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_client_id;
            ann_custom_OwnershipRequestType.reset();
            AppliedAnnotationSeq tmp_ann_custom_client_id;
            eprosima::fastcdr::optional<std::string> unit_client_id;
            eprosima::fastcdr::optional<AnnotationParameterValue> min_client_id;
            eprosima::fastcdr::optional<AnnotationParameterValue> max_client_id;
            eprosima::fastcdr::optional<std::string> hash_id_client_id;
            if (unit_client_id.has_value() || min_client_id.has_value() || max_client_id.has_value() || hash_id_client_id.has_value())
            {
                member_ann_builtin_client_id = TypeObjectUtils::build_applied_builtin_member_annotations(unit_client_id, min_client_id, max_client_id, hash_id_client_id);
            }
            if (!tmp_ann_custom_client_id.empty())
            {
                ann_custom_OwnershipRequestType = tmp_ann_custom_client_id;
            }
            CompleteMemberDetail detail_client_id = TypeObjectUtils::build_complete_member_detail(name_client_id, member_ann_builtin_client_id, ann_custom_OwnershipRequestType);
            CompleteStructMember member_client_id = TypeObjectUtils::build_complete_struct_member(common_client_id, detail_client_id);
            TypeObjectUtils::add_complete_struct_member(member_seq_OwnershipRequestType, member_client_id);
        }
        {
            TypeIdentifierPair type_ids_requester_type;
            ReturnCode_t return_code_requester_type {eprosima::fastdds::dds::RETCODE_OK};
            return_code_requester_type =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "InjectionControllerType", type_ids_requester_type);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_requester_type)
            {
            ::register_InjectionControllerType_type_identifier(type_ids_requester_type);
            }
            StructMemberFlag member_flags_requester_type = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_requester_type = 0x00000001;
            bool common_requester_type_ec {false};
            CommonStructMember common_requester_type {TypeObjectUtils::build_common_struct_member(member_id_requester_type, member_flags_requester_type, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_requester_type, common_requester_type_ec))};
            if (!common_requester_type_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure requester_type member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_requester_type = "requester_type";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_requester_type;
            ann_custom_OwnershipRequestType.reset();
            CompleteMemberDetail detail_requester_type = TypeObjectUtils::build_complete_member_detail(name_requester_type, member_ann_builtin_requester_type, ann_custom_OwnershipRequestType);
            CompleteStructMember member_requester_type = TypeObjectUtils::build_complete_struct_member(common_requester_type, detail_requester_type);
            TypeObjectUtils::add_complete_struct_member(member_seq_OwnershipRequestType, member_requester_type);
        }
        {
            TypeIdentifierPair type_ids_current_strength;
            ReturnCode_t return_code_current_strength {eprosima::fastdds::dds::RETCODE_OK};
            return_code_current_strength =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_uint32_t", type_ids_current_strength);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_current_strength)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "current_strength Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_current_strength = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_current_strength = 0x00000002;
            bool common_current_strength_ec {false};
            CommonStructMember common_current_strength {TypeObjectUtils::build_common_struct_member(member_id_current_strength, member_flags_current_strength, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_current_strength, common_current_strength_ec))};
            if (!common_current_strength_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure current_strength member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_current_strength = "current_strength";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_current_strength;
            ann_custom_OwnershipRequestType.reset();
            CompleteMemberDetail detail_current_strength = TypeObjectUtils::build_complete_member_detail(name_current_strength, member_ann_builtin_current_strength, ann_custom_OwnershipRequestType);
            CompleteStructMember member_current_strength = TypeObjectUtils::build_complete_struct_member(common_current_strength, detail_current_strength);
            TypeObjectUtils::add_complete_struct_member(member_seq_OwnershipRequestType, member_current_strength);
        }
        CompleteStructType struct_type_OwnershipRequestType = TypeObjectUtils::build_complete_struct_type(struct_flags_OwnershipRequestType, header_OwnershipRequestType, member_seq_OwnershipRequestType);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_OwnershipRequestType, type_name_OwnershipRequestType.to_string(), type_ids_OwnershipRequestType))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "OwnershipRequestType already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_OwnershipReplyType_type_identifier(
        TypeIdentifierPair& type_ids_OwnershipReplyType)
{

    ReturnCode_t return_code_OwnershipReplyType {eprosima::fastdds::dds::RETCODE_OK};
    return_code_OwnershipReplyType =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "OwnershipReplyType", type_ids_OwnershipReplyType);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_OwnershipReplyType)
    {
        StructTypeFlag struct_flags_OwnershipReplyType = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_OwnershipReplyType = "OwnershipReplyType";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_OwnershipReplyType;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_OwnershipReplyType;
        AppliedAnnotationSeq tmp_ann_custom_OwnershipReplyType;
        eprosima::fastcdr::optional<AppliedVerbatimAnnotation> verbatim_OwnershipReplyType;
        if (!tmp_ann_custom_OwnershipReplyType.empty())
        {
            ann_custom_OwnershipReplyType = tmp_ann_custom_OwnershipReplyType;
        }

        CompleteTypeDetail detail_OwnershipReplyType = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_OwnershipReplyType, ann_custom_OwnershipReplyType, type_name_OwnershipReplyType.to_string());
        CompleteStructHeader header_OwnershipReplyType;
        header_OwnershipReplyType = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_OwnershipReplyType);
        CompleteStructMemberSeq member_seq_OwnershipReplyType;
        {
            TypeIdentifierPair type_ids_client_id;
            ReturnCode_t return_code_client_id {eprosima::fastdds::dds::RETCODE_OK};
            return_code_client_id =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_client_id);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_client_id)
            {
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded", type_ids_client_id))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_client_id = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, true, false);
            MemberId member_id_client_id = 0x00000000;
            bool common_client_id_ec {false};
            CommonStructMember common_client_id {TypeObjectUtils::build_common_struct_member(member_id_client_id, member_flags_client_id, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_client_id, common_client_id_ec))};
            if (!common_client_id_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure client_id member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_client_id = "client_id";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_client_id;
            ann_custom_OwnershipReplyType.reset();
            AppliedAnnotationSeq tmp_ann_custom_client_id;
            eprosima::fastcdr::optional<std::string> unit_client_id;
            eprosima::fastcdr::optional<AnnotationParameterValue> min_client_id;
            eprosima::fastcdr::optional<AnnotationParameterValue> max_client_id;
            eprosima::fastcdr::optional<std::string> hash_id_client_id;
            if (unit_client_id.has_value() || min_client_id.has_value() || max_client_id.has_value() || hash_id_client_id.has_value())
            {
                member_ann_builtin_client_id = TypeObjectUtils::build_applied_builtin_member_annotations(unit_client_id, min_client_id, max_client_id, hash_id_client_id);
            }
            if (!tmp_ann_custom_client_id.empty())
            {
                ann_custom_OwnershipReplyType = tmp_ann_custom_client_id;
            }
            CompleteMemberDetail detail_client_id = TypeObjectUtils::build_complete_member_detail(name_client_id, member_ann_builtin_client_id, ann_custom_OwnershipReplyType);
            CompleteStructMember member_client_id = TypeObjectUtils::build_complete_struct_member(common_client_id, detail_client_id);
            TypeObjectUtils::add_complete_struct_member(member_seq_OwnershipReplyType, member_client_id);
        }
        {
            TypeIdentifierPair type_ids_ownership_allowed;
            ReturnCode_t return_code_ownership_allowed {eprosima::fastdds::dds::RETCODE_OK};
            return_code_ownership_allowed =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_bool", type_ids_ownership_allowed);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_ownership_allowed)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "ownership_allowed Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_ownership_allowed = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_ownership_allowed = 0x00000001;
            bool common_ownership_allowed_ec {false};
            CommonStructMember common_ownership_allowed {TypeObjectUtils::build_common_struct_member(member_id_ownership_allowed, member_flags_ownership_allowed, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_ownership_allowed, common_ownership_allowed_ec))};
            if (!common_ownership_allowed_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure ownership_allowed member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_ownership_allowed = "ownership_allowed";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_ownership_allowed;
            ann_custom_OwnershipReplyType.reset();
            CompleteMemberDetail detail_ownership_allowed = TypeObjectUtils::build_complete_member_detail(name_ownership_allowed, member_ann_builtin_ownership_allowed, ann_custom_OwnershipReplyType);
            CompleteStructMember member_ownership_allowed = TypeObjectUtils::build_complete_struct_member(common_ownership_allowed, detail_ownership_allowed);
            TypeObjectUtils::add_complete_struct_member(member_seq_OwnershipReplyType, member_ownership_allowed);
        }
        {
            TypeIdentifierPair type_ids_strength;
            ReturnCode_t return_code_strength {eprosima::fastdds::dds::RETCODE_OK};
            return_code_strength =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_uint32_t", type_ids_strength);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_strength)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "strength Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_strength = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_strength = 0x00000002;
            bool common_strength_ec {false};
            CommonStructMember common_strength {TypeObjectUtils::build_common_struct_member(member_id_strength, member_flags_strength, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_strength, common_strength_ec))};
            if (!common_strength_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure strength member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_strength = "strength";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_strength;
            ann_custom_OwnershipReplyType.reset();
            CompleteMemberDetail detail_strength = TypeObjectUtils::build_complete_member_detail(name_strength, member_ann_builtin_strength, ann_custom_OwnershipReplyType);
            CompleteStructMember member_strength = TypeObjectUtils::build_complete_struct_member(common_strength, detail_strength);
            TypeObjectUtils::add_complete_struct_member(member_seq_OwnershipReplyType, member_strength);
        }
        CompleteStructType struct_type_OwnershipReplyType = TypeObjectUtils::build_complete_struct_type(struct_flags_OwnershipReplyType, header_OwnershipReplyType, member_seq_OwnershipReplyType);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_OwnershipReplyType, type_name_OwnershipReplyType.to_string(), type_ids_OwnershipReplyType))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "OwnershipReplyType already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_CurrentOwnershipStateType_type_identifier(
        TypeIdentifierPair& type_ids_CurrentOwnershipStateType)
{

    ReturnCode_t return_code_CurrentOwnershipStateType {eprosima::fastdds::dds::RETCODE_OK};
    return_code_CurrentOwnershipStateType =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "CurrentOwnershipStateType", type_ids_CurrentOwnershipStateType);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_CurrentOwnershipStateType)
    {
        StructTypeFlag struct_flags_CurrentOwnershipStateType = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_CurrentOwnershipStateType = "CurrentOwnershipStateType";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_CurrentOwnershipStateType;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_CurrentOwnershipStateType;
        AppliedAnnotationSeq tmp_ann_custom_CurrentOwnershipStateType;
        eprosima::fastcdr::optional<AppliedVerbatimAnnotation> verbatim_CurrentOwnershipStateType;
        if (!tmp_ann_custom_CurrentOwnershipStateType.empty())
        {
            ann_custom_CurrentOwnershipStateType = tmp_ann_custom_CurrentOwnershipStateType;
        }

        CompleteTypeDetail detail_CurrentOwnershipStateType = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_CurrentOwnershipStateType, ann_custom_CurrentOwnershipStateType, type_name_CurrentOwnershipStateType.to_string());
        CompleteStructHeader header_CurrentOwnershipStateType;
        header_CurrentOwnershipStateType = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_CurrentOwnershipStateType);
        CompleteStructMemberSeq member_seq_CurrentOwnershipStateType;
        {
            TypeIdentifierPair type_ids_requester_type;
            ReturnCode_t return_code_requester_type {eprosima::fastdds::dds::RETCODE_OK};
            return_code_requester_type =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "InjectionControllerType", type_ids_requester_type);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_requester_type)
            {
            ::register_InjectionControllerType_type_identifier(type_ids_requester_type);
            }
            StructMemberFlag member_flags_requester_type = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_requester_type = 0x00000000;
            bool common_requester_type_ec {false};
            CommonStructMember common_requester_type {TypeObjectUtils::build_common_struct_member(member_id_requester_type, member_flags_requester_type, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_requester_type, common_requester_type_ec))};
            if (!common_requester_type_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure requester_type member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_requester_type = "requester_type";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_requester_type;
            ann_custom_CurrentOwnershipStateType.reset();
            CompleteMemberDetail detail_requester_type = TypeObjectUtils::build_complete_member_detail(name_requester_type, member_ann_builtin_requester_type, ann_custom_CurrentOwnershipStateType);
            CompleteStructMember member_requester_type = TypeObjectUtils::build_complete_struct_member(common_requester_type, detail_requester_type);
            TypeObjectUtils::add_complete_struct_member(member_seq_CurrentOwnershipStateType, member_requester_type);
        }
        {
            TypeIdentifierPair type_ids_current_strength;
            ReturnCode_t return_code_current_strength {eprosima::fastdds::dds::RETCODE_OK};
            return_code_current_strength =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_uint32_t", type_ids_current_strength);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_current_strength)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "current_strength Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_current_strength = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_current_strength = 0x00000001;
            bool common_current_strength_ec {false};
            CommonStructMember common_current_strength {TypeObjectUtils::build_common_struct_member(member_id_current_strength, member_flags_current_strength, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_current_strength, common_current_strength_ec))};
            if (!common_current_strength_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure current_strength member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_current_strength = "current_strength";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_current_strength;
            ann_custom_CurrentOwnershipStateType.reset();
            CompleteMemberDetail detail_current_strength = TypeObjectUtils::build_complete_member_detail(name_current_strength, member_ann_builtin_current_strength, ann_custom_CurrentOwnershipStateType);
            CompleteStructMember member_current_strength = TypeObjectUtils::build_complete_struct_member(common_current_strength, detail_current_strength);
            TypeObjectUtils::add_complete_struct_member(member_seq_CurrentOwnershipStateType, member_current_strength);
        }
        CompleteStructType struct_type_CurrentOwnershipStateType = TypeObjectUtils::build_complete_struct_type(struct_flags_CurrentOwnershipStateType, header_CurrentOwnershipStateType, member_seq_CurrentOwnershipStateType);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_CurrentOwnershipStateType, type_name_CurrentOwnershipStateType.to_string(), type_ids_CurrentOwnershipStateType))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "CurrentOwnershipStateType already registered in TypeObjectRegistry for a different type.");
        }
    }
}

